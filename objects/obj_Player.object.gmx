<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerOne</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init Player Vars
hp = 3;
vSpeed = 0;
hSpeed = 0;
jVelocity = 30;
moveVelocity = 15;
grav = 1.7;
canFire = true;
stepCounter = 20;
isCharging = false;
charge = 0;
move = 0;
isFiring = false;
timeToHit =  0;


for(i = 0; i &lt; hp; i++){
    totalLife[i] = instance_create(view_xview + 120 * i, view_yview, obj_Life);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enemy Collision
if(timeToHit &gt; 0){
    timeToHit--;
}
else{
    timeToHit = 0;
}

if(hp &lt;= 0)
{
   game_restart();
}

if((place_meeting(x, y, obj_BasicPig) || place_meeting(x, y, obj_FirePig)) &amp;&amp; timeToHit == 0)
{
    timeToHit = 120;
    if(hp &gt; 0){
        hp--;
        instance_destroy(totalLife[hp]);
    }
    
    vSpeed = -jVelocity;
    hSpeed = -sign(image_xscale) * moveVelocity * 20;
}

if(place_meeting(x, y, obj_FlameProjectile) &amp;&amp; timeToHit == 0){
    timeToHit = 120;
    if(hp &gt; 0){
        hp--;
        instance_destroy(totalLife[hp]);
    }
    vSpeed = -jVelocity;
    hSpeed = -sign(image_xscale) * moveVelocity * 200;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
image_speed = 1/4;

if(timeToHit &gt; 0){
    image_alpha = 0.5;
}
else{
    image_alpha = 1;
}

if(move != 0 &amp;&amp; !isCharging){
    image_xscale = sign(move);
}
if(isFiring){
    sprite_index = spr_PlayerAttack;
}
else if(isCharging){
    sprite_index = spr_ChargeAttack;
}
else if(vSpeed != 0 &amp;&amp; !place_meeting(x, y + vSpeed, obj_Platform)){
    sprite_index = spr_PlayerJump;
}
else if(hSpeed != 0){
    sprite_index = spr_WalkCycle;
}
else if(hSpeed == 0 &amp;&amp; vSpeed == 0 &amp;&amp; !place_meeting(x+hSpeed, y, obj_Platform)){
    sprite_index = spr_PlayerOne;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player input 

keyRight = keyboard_check(ord('D'));
keyLeft = keyboard_check(ord('A'));
keyDown = keyboard_check(ord('S'));
keyUp = keyboard_check(ord('W'));

move = -keyLeft + keyRight;
hSpeed = move * moveVelocity;

vSpeed += grav;

if (place_meeting(x, y+1, obj_Platform)){
    vSpeed = keyUp * -jVelocity;
}

//Horizontal Collision
if (place_meeting(x+hSpeed, y, obj_Platform)){
    while(!place_meeting(x+sign(hSpeed), y, obj_Platform)){
        x += sign(hSpeed);
    }
    hSpeed = 0;
}
if(isCharging){
    hSpeed = 0;
}
x += hSpeed;
//Vertical Collision
if (place_meeting(x, y + vSpeed, obj_Platform)){
    while(!place_meeting(x, y + sign(vSpeed), obj_Platform)){
        y += sign(vSpeed);
    }
    vSpeed = 0;
}
y += vSpeed;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Projectiles

shootRight = keyboard_check(vk_right);
shootLeft = keyboard_check(vk_left);

if(canFire){
    isFiring = false;
}

if(stepCounter &gt; 0)
{
    stepCounter--;
}
else
{
    stepCounter = 20;
    canFire = true;
}

if(shootLeft &amp;&amp; obj_Familiar.charge &gt;= 3 &amp;&amp; canFire){
    canFire = false;
    isCharging = true;
    if(stepCounter % 20 == 0 &amp;&amp; charge &lt; 3){
        charge++;
        if(obj_Familiar.charge &gt; 0){
            obj_Familiar.charge--;
        }
    }
    else if(charge &gt; 3){
        charge = 3;
    }
}
else if(keyboard_check_released(vk_left) &amp;&amp; charge &lt; 3){
    isCharging = false;
    charge = 0;
}
else if(keyboard_check_released(vk_left) &amp;&amp; charge &gt;= 3){   
    isCharging = false;
    isFiring = true;
    bullet = instance_create(x, y - 25, obj_LargeBullet)
    bullet.damage = charge;
    bullet.speed = 10;
    if(sign(image_xscale == 1)) bullet.direction = 0;
    if(sign(image_xscale == -1)) bullet.direction = 180;
    bullet.image_xscale *= sign(image_xscale);
    charge = 0;
}
else if(keyboard_check_pressed(vk_right) &amp;&amp; canFire){   
    canFire = false;
    isFiring = true;
    bullet = instance_create(x, y - 25, obj_Bullet);
    bullet.speed = 25;
    if(sign(image_xscale == 1)) bullet.direction = 0;
    if(sign(image_xscale == -1)) bullet.direction = 180;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Player Life Bar

for(i = 0; i &lt; hp; i++){
    totalLife[i].x = view_xview + 1000 + 100 * i;
    totalLife[i].y = view_yview + 50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
